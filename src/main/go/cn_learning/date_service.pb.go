// Code generated by protoc-gen-go. DO NOT EDIT.
// source: date_service.proto

package cn_learning

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DateMessage struct {
	Date                 string   `protobuf:"bytes,1,opt,name=date" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DateMessage) Reset()         { *m = DateMessage{} }
func (m *DateMessage) String() string { return proto.CompactTextString(m) }
func (*DateMessage) ProtoMessage()    {}
func (*DateMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_date_service_4b663960c0668994, []int{0}
}
func (m *DateMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DateMessage.Unmarshal(m, b)
}
func (m *DateMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DateMessage.Marshal(b, m, deterministic)
}
func (dst *DateMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateMessage.Merge(dst, src)
}
func (m *DateMessage) XXX_Size() int {
	return xxx_messageInfo_DateMessage.Size(m)
}
func (m *DateMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DateMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DateMessage proto.InternalMessageInfo

func (m *DateMessage) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func init() {
	proto.RegisterType((*DateMessage)(nil), "cn.learning.DateMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DateServiceClient is the client API for DateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DateServiceClient interface {
	GetDate(ctx context.Context, in *DateMessage, opts ...grpc.CallOption) (*DateMessage, error)
}

type dateServiceClient struct {
	cc *grpc.ClientConn
}

func NewDateServiceClient(cc *grpc.ClientConn) DateServiceClient {
	return &dateServiceClient{cc}
}

func (c *dateServiceClient) GetDate(ctx context.Context, in *DateMessage, opts ...grpc.CallOption) (*DateMessage, error) {
	out := new(DateMessage)
	err := c.cc.Invoke(ctx, "/cn.learning.DateService/getDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DateService service

type DateServiceServer interface {
	GetDate(context.Context, *DateMessage) (*DateMessage, error)
}

func RegisterDateServiceServer(s *grpc.Server, srv DateServiceServer) {
	s.RegisterService(&_DateService_serviceDesc, srv)
}

func _DateService_GetDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DateServiceServer).GetDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.learning.DateService/GetDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DateServiceServer).GetDate(ctx, req.(*DateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _DateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cn.learning.DateService",
	HandlerType: (*DateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getDate",
			Handler:    _DateService_GetDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "date_service.proto",
}

func init() { proto.RegisterFile("date_service.proto", fileDescriptor_date_service_4b663960c0668994) }

var fileDescriptor_date_service_4b663960c0668994 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x49, 0x2c, 0x49,
	0x8d, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x4e, 0xce, 0xd3, 0xcb, 0x49, 0x4d, 0x2c, 0xca, 0xcb, 0xcc, 0x4b, 0x97, 0x92, 0x49, 0xcf, 0xcf,
	0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9,
	0xcc, 0xcf, 0x2b, 0x86, 0x28, 0x55, 0x52, 0xe4, 0xe2, 0x76, 0x49, 0x2c, 0x49, 0xf5, 0x4d, 0x2d,
	0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x12, 0xe2, 0x62, 0x01, 0x99, 0x27, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1,
	0x19, 0x04, 0x66, 0x1b, 0x65, 0x41, 0x94, 0x04, 0x43, 0xac, 0x10, 0x8a, 0xe6, 0x62, 0x4f, 0x4f,
	0x2d, 0x01, 0x89, 0x08, 0x49, 0xe8, 0x21, 0x59, 0xa4, 0x87, 0x64, 0x8e, 0x14, 0x4e, 0x19, 0x25,
	0x99, 0xa6, 0xcb, 0x4f, 0x26, 0x33, 0x89, 0x09, 0x89, 0xe8, 0x97, 0x19, 0xea, 0xa7, 0x56, 0x24,
	0xe6, 0x16, 0xe4, 0xa4, 0xea, 0xa7, 0xa7, 0x96, 0x80, 0xad, 0x4a, 0x62, 0x03, 0xbb, 0xca, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x1b, 0x72, 0x9a, 0xd6, 0x00, 0x00, 0x00,
}
